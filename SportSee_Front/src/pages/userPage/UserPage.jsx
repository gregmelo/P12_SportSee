import React from "react";
import { useParams } from "react-router-dom";
import { USER_MAIN_DATA } from "../../mock/mockData"; // Importer les donn√©es mock√©es
import "./UserPage.scss";
import TopNav from "../../components/topNav/TopNav";
import LeftNav from "../../components/leftNav/LeftNav";
import PropTypes from "prop-types";
import { useDataType } from "../../context/DataTypeContext";

/**
 * Page utilisateur permettant d'afficher des informations sp√©cifiques √† un utilisateur.
 * Le type de donn√©es (mock ou API) est r√©cup√©r√© depuis le contexte, et l'utilisateur est r√©cup√©r√© 
 * soit √† partir des donn√©es mock√©es, soit via une API.
 * 
 * @returns {JSX.Element} La page avec les informations de l'utilisateur et un message de f√©licitations.
 */
export default function UserPage() {
    const { userId } = useParams(); // R√©cup√®re l'identifiant de l'utilisateur √† partir de l'URL
    const { dataType } = useDataType(); // R√©cup√®re le type de donn√©es depuis le contexte


    // √âtat pour stocker les donn√©es de l'utilisateur
    const [user, setUser] = React.useState(null);

    /**
     * Fonction asynchrone pour r√©cup√©rer les d√©tails d'un utilisateur en fonction du type de donn√©es s√©lectionn√©.
     * - Si le type est "mock", les donn√©es sont extraites depuis les donn√©es mock√©es.
     * - Si le type est "api", une requ√™te est envoy√©e √† une API pour r√©cup√©rer les informations utilisateur.
     * 
     * @returns {Object|null} Les d√©tails de l'utilisateur ou null si l'utilisateur n'est pas trouv√©.
     */
    const fetchUserDetails = async () => {
        // Si le type de donn√©es est "mock", on cherche les donn√©es dans le fichier mock
        if (dataType === "mock") {
            const userMock = USER_MAIN_DATA.find(user => user.id === parseInt(userId));
            return userMock && userMock.userInfos
                ? { id: userMock.id, firstName: userMock.userInfos.firstName }
                : null;
        } 
        // Si le type de donn√©es est "api", on fait une requ√™te vers l'API pour r√©cup√©rer les donn√©es
        else if (dataType === "api") {
            try {
                const response = await fetch(`http://localhost:3000/user/${userId}`);
                const data = await response.json();
                if (data && data.data && data.data.userInfos) {
                    return { id: data.data.id, firstName: data.data.userInfos.firstName };
                } else {
                    console.error("Donn√©es utilisateur manquantes dans la r√©ponse de l'API.");
                    return null;
                }
            } catch (error) {
                console.error("Error fetching user data: ", error);
                return null;
            }
        }
        return null;
    };

    /**
     * Fonction qui charge les donn√©es de l'utilisateur.
     * Elle appelle `fetchUserDetails` pour obtenir les d√©tails, puis met √† jour l'√©tat `user`.
     */
    const loadUserData = async () => {
        const userDetails = await fetchUserDetails();
        setUser(userDetails);
    };

    // Utilise useEffect pour charger les donn√©es de l'utilisateur chaque fois que l'ID ou le type de donn√©es change
    React.useEffect(() => {
        loadUserData();
    }, [userId, dataType]); // D√©pendances : recharge les donn√©es uniquement si userId ou dataType changent

    // Affiche un message de chargement tant que les donn√©es ne sont pas disponibles
    if (!user) {
        return <div>Loading...</div>;
    }

    return (
        <>
            <TopNav />
            <LeftNav />
            <div className="user-page">
                <div className="header">
                    <h1>
                        Bonjour <span>{user.firstName}</span>
                    </h1>
                    <p>F√©licitations ! Vous avez explos√© vos objectifs hier üëè</p>
                </div>
                {/* Affiche le type de donn√©es utilis√© (mock ou API) */}
                <p>Type de donn√©es : {dataType}</p>
            </div>
        </>
    );
}

// D√©finition des types attendus pour les props (ici, userId et dataType)
UserPage.propTypes = {
    userId: PropTypes.string, // ID de l'utilisateur, pass√© par l'URL
    dataType: PropTypes.string, // Type de donn√©es (mock ou API)
};
